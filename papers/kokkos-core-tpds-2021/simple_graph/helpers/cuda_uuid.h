/*
 * Copyright 2010,2012-2014 NVIDIA Corporation.  All rights reserved.
 *
 * NOTICE TO LICENSEE:
 *
 * This source code and/or documentation ("Licensed Deliverables") are
 * subject to NVIDIA intellectual property rights under U.S. and
 * international Copyright laws.
 *
 * These Licensed Deliverables contained herein is PROPRIETARY and
 * CONFIDENTIAL to NVIDIA and is being provided under the terms and
 * conditions of a form of NVIDIA software license agreement by and
 * between NVIDIA and Licensee ("License Agreement") or electronically
 * accepted by Licensee.  Notwithstanding any terms or conditions to
 * the contrary in the License Agreement, reproduction or disclosure
 * of the Licensed Deliverables to any third party without the express
 * written consent of NVIDIA is prohibited.
 *
 * NOTWITHSTANDING ANY TERMS OR CONDITIONS TO THE CONTRARY IN THE
 * LICENSE AGREEMENT, NVIDIA MAKES NO REPRESENTATION ABOUT THE
 * SUITABILITY OF THESE LICENSED DELIVERABLES FOR ANY PURPOSE.  IT IS
 * PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.
 * NVIDIA DISCLAIMS ALL WARRANTIES WITH REGARD TO THESE LICENSED
 * DELIVERABLES, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY,
 * NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE.
 * NOTWITHSTANDING ANY TERMS OR CONDITIONS TO THE CONTRARY IN THE
 * LICENSE AGREEMENT, IN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY
 * SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, OR ANY
 * DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
 * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
 * OF THESE LICENSED DELIVERABLES.
 *
 * U.S. Government End Users.  These Licensed Deliverables are a
 * "commercial item" as that term is defined at 48 C.F.R. 2.101 (OCT
 * 1995), consisting of "commercial computer software" and "commercial
 * computer software documentation" as such terms are used in 48
 * C.F.R. 12.212 (SEPT 1995) and is provided to the U.S. Government
 * only as a commercial end item.  Consistent with 48 C.F.R.12.212 and
 * 48 C.F.R. 227.7202-1 through 227.7202-4 (JUNE 1995), all
 * U.S. Government End Users acquire the Licensed Deliverables with
 * only those rights set forth herein.
 *
 * Any use of the Licensed Deliverables in individual and commercial
 * software must include, in the user documentation and internal
 * comments to the code, the above Disclaimer and U.S. Government End
 * Users Notice.
 */

#ifndef __cuda_uuid_h__
#define __cuda_uuid_h__

#include "cuda.h"

// Utility macros for defining and using UUID values for use with
// the CUDA driver.
//
// CU_INIT_UUID must be #defined in exactly one translation unit
// per linkage unit (i.e. one .c or .cpp file per binary).  This
// allows multiple .c and .cpp files to include headers that define
// UUIDs using CU_DEFINE_UUID: The translation unit that #defines
// CU_INIT_UUID will define and initialize the UUIDs, and all other
// translation units will link to that definition.
//
// Alternatively, CU_INIT_UUID_STATIC needs to be defined in all
// translation units in the linkage unit (i.e. all .c and .cpp files
// per binary). Note that this will increase the size of your binary
// because every translation unit makes a copy of the uuid.
// Mixing CU_INIT_UUID_STATIC and CU_INIT_UUID in
// the same linkage unit is not supported.

#if defined(CU_INIT_UUID) && defined(CU_INIT_UUID_STATIC)
#ifdef _MSC_VER
#error Mixing CU_INIT_UUID with CU_INIT_UUID_STATIC
#else
#error "Mixing CU_INIT_UUID with CU_INIT_UUID_STATIC"
#endif
#endif

// Define helper macro: CU_INIT_EXTERN_CONST 
// In C, global consts have external linkage by default.  In C++,
// global consts have internal linkage by default, and require the
// "extern" storage class specifier to have external linkage.  C++
// allows using "extern" with initializers, but it is illegal in C.
// Thus, there is no common syntax for C and C++ to declare and
// initialize global constants with external linkage.  This macro
// helps reduce duplication of other macros by factoring out the
// C/C++ discrepancy.
#ifdef __cplusplus
#define CU_INIT_EXTERN_CONST extern const
#else
#define CU_INIT_EXTERN_CONST const
#endif

// Define helper macro: CU_UUID_CONST
// Chooses correct scope of CUuuid constants depending on configuration
// (CU_INIT_UUID_STATIC) and language (C or C++)
#ifdef CU_INIT_UUID_STATIC
#define CU_UUID_CONST static const
#else
#define CU_UUID_CONST CU_INIT_EXTERN_CONST
#endif

// Define macro CU_DEFINE_UUID.  The parameters are the commonly
// used "int-short-short-char[8]" style, which can be generated by
// Microsoft's guidgen.exe tool, Visual Studio's "Create GUID"
// option in the Tools menu (select style #2), and many web-based
// UUID generator tools.  Here's an example of what "Create GUID"
// style #2 generates:
//
//   DEFINE_GUID( <<name>>, 
//   0x2446054, 0xbb8e, 0x4b2f, 0x8b, 0xfc, 0xa4, 0xfe, 0x44, 0x9, 0x8f, 0xb8);
//
// So to use one of these with CUDA, just change the macro to
// CU_DEFINE_UUID and choose a symbol name.  For example:
//
//   CU_DEFINE_UUID( MyUuid, 
//   0x2446054, 0xbb8e, 0x4b2f, 0x8b, 0xfc, 0xa4, 0xfe, 0x44, 0x9, 0x8f, 0xb8);
//
#if defined(CU_INIT_UUID) || defined(CU_INIT_UUID_STATIC)

#define CU_CHAR(x) (char)((x) & 0xff)
// Define the symbol as exportable to other translation units, and
// initialize the value.  Inner set of parens is necessary because
// "bytes" array needs parens within the struct initializer, which
// also needs parens.  
#define CU_DEFINE_UUID(name, a, b, c, d0, d1, d2, d3, d4, d5, d6, d7)          \
    CU_UUID_CONST CUuuid name =                                                \
    {                                                                          \
      {                                                                        \
        CU_CHAR(a), CU_CHAR((a) >> 8), CU_CHAR((a) >> 16), CU_CHAR((a) >> 24), \
        CU_CHAR(b), CU_CHAR((b) >> 8),                                         \
        CU_CHAR(c), CU_CHAR((c) >> 8),                                         \
        CU_CHAR(d0),                                                           \
        CU_CHAR(d1),                                                           \
        CU_CHAR(d2),                                                           \
        CU_CHAR(d3),                                                           \
        CU_CHAR(d4),                                                           \
        CU_CHAR(d5),                                                           \
        CU_CHAR(d6),                                                           \
        CU_CHAR(d7)                                                            \
      }                                                                        \
    }

#else

// Declare the symbol to be imported from another translation unit.
#define CU_DEFINE_UUID(name, a, b, c, d0, d1, d2, d3, d4, d5, d6, d7) \
    extern const CUuuid name

#endif


#endif // file guard
